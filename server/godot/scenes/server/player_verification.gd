class_name DFPlayerVerification
extends Node
## Defines how to initialize and track an incoming player connection
## request.

@onready var player_state_scene: PackedScene = preload("res://scenes/instances/player/player.tscn")


var _DEBUG_PLAYER_CREDENTIALS = {  # { mint: String -> Dictionary }
	"0xPIZZA": {
		DFStateKeys.KDFPlayerUsername: "Panucci",
	},
	"0xPUB": {
		DFStateKeys.KDFPlayerUsername: "O'ZORGNAX",
	},
}


## Verifies that the incoming client has a valid token. This token is generated
## by the authentication server earlier in the handshake and passed along to
## the game server.
## [br][br]
## The incoming player connection request does not contain any stored
## credentials; the request instead contains a token generated by the
## authentication server.
## [br][br]
## Returns a valid [DFPlayer] object if the [param token] is valid, or
## [code]null[/code] if it is not.
## [br][br]
## TODO(minkezhang): Implement authentication server.
func verify(sid: int, token: String = "0xPIZZA") -> DFPlayer:
	if token not in _DEBUG_PLAYER_CREDENTIALS:
		return null
	
	var p = player_state_scene.instantiate()
	p.session_id = 0
	p.session_id = sid
	p.name = str(sid)
	p.username = _DEBUG_PLAYER_CREDENTIALS[token][DFStateKeys.KDFPlayerUsername]
	
	return p
